#+title: Typetypes
#+author: Enrico Flor

A thing I happen to type relatively often in LaTeX are functional type
signature.  It is not a pleasant experience, and it becomes a horrible
one once you want or have to change their style, after having dozens
of them in your document.  So I wrote two macros for myself, ~\ttype~
and ~\ttype*~, that make everything about it extremely simple.

This stuff is not packaged for CTAN (yet), and there isn't a proper
documentation (yet): the readme file you are reading is the
documentation, and the simplest way to "install" this package is to
put the file ~typetypes.sty~ in the same directory as you LaTeX file,
and load it through ~\usepackage{typetypes}~.  You may need a reasonably
recent version of TeXLive (>2020), because this package relies on
certain LaTeX3 features, but it may very well work on older versions
too.
* Basic usage

The two macros have a very simple syntax.  Here I show the basic uses,
without any default being modified.  The arguments of the macros are
detached from one another for clarity, but you don't need to have them
separated by white space in your source file.

#+begin_src latex
A \ttype  {e} {t}
B \ttype* {e} {t}
C \ttype  {{e} {t}} {t}
D \ttype* {{e} {t}} {t}
E \ttype* {{{e} {t}} {t}} {{e} {t}} {t}
#+end_src

[[./figures/typetypes-1.png]]

So the difference between ~\ttype~ and ~\ttype*~ is that the latter never
outputs any outer delimiter.  Both macros take an arbitrary number of
arguments, and they are recursive.  *Each individual type has to be an
argument, enclosed in braces.*
* Customization
This package specifies 9 options (key value pairs) to customize the
output of the ~\ttype~ and ~\ttype*~ macro.  For reference, this
customization system is build on the ~pgfkeys~ package.

| Key         | Value                                      | Default |
|-------------+--------------------------------------------+---------|
| ~sep~         | separator between types                    | â†’       |
| ~leftdel~     | left delimiter                             | (       |
| ~rightdel~    | right delimiter                            | )       |
| ~sepdist~     | distance between ~sep~ and the types         | 0pt     |
| ~formattype~  | macro applying to individual types         |         |
| ~formatsep~   | macro applying to ~sep~                      |         |
| ~formatleft~  | macro applying to ~leftdel~                  |         |
| ~formatright~ | macro applying to ~rightdel~                 |         |
| ~format~      | macro applying to the whole type signature |         |

The first four keys are rather straightforward.  Let's see how they
can be used by passing different values as optional arguments to
~\ttype~:

#+begin_src latex
A \ttype[sep=:,leftdel=[,rightdel=]] {{e} {t}} {s} {t}

B \ttype[sep={,},sepdist=4pt,leftdel=[,rightdel=]] {{e} {t}} {s} {t}

C \ttype*[sep={,},sepdist=4pt,leftdel=[,rightdel=]] {{e} {t}} {s} {t}
#+end_src

[[./figures/typetypes-2.png]]

The last five keys are less obvious but they provide for very fine
grained customization.  Essentially, you can define whatever macro
(e.g. through ~\newcommand~, see the abundant documentation out there
for information on how this macro works) that *takes one and only one
argument* and pass it as a value to these keys.  What typetypes will do
is simply applying that macro to the object in question.  Of course
macros that are already defined (in LaTeX or in another package you
are using) will do just fine.

For example, say I want all left delimiters to be italic and all
separators to be boldface.  I can do this easily:

#+begin_src latex
A \ttype[formatleft=\textit, formatsep=\textbf] {{e} {t}} {s} {t}
#+end_src

[[./figures/typetypes-3.png]]

Suppose that I also want individual types to be set in red, and the
whole type signature to be set in a small font.  I will define a
couple of macros in my preamble first:

#+begin_src latex
\usepackage{xcolor}
\newcommand{\typecolor}[1]{\textcolor{red}{#1}}
\newcommand{\typesize}[1]{{\scriptsize #1}}
#+end_src

and then pass them as values to the appropriate keys:

#+begin_src latex
A \ttype[
    formatleft=\textit,
    formatsep=\textbf,
    formattype=\typecolor,
    format=\typesize] {{e} {t}} {s} {t}
#+end_src

[[./figures/typetypes-4.png]]

These things become useful once you *define your own styles*.  This is
done in the same way as any other package using ~pgfkeys~ does.  You can
use the ~\ttypestyle~ macro in your preamble to set global values for
the keys in the table above.  For example, if I want the horrible
choice of italic left delimiters and boldface separators to hold for
all invocation of ~\ttype~ and ~\ttype*~ throughout the document (unless
locally overridden through different specification in the optional
argument slot of the macro), I will put this in the preamble:

#+begin_src latex
\ttypestyle{
  formatleft=\textit,
  formatsep=\textbf
}
#+end_src

The more sensible thing to do however is to bundle different key-value
specification in a *style* (you can define as many styles as you want of
course).  For example, say that beside those global value I want do
define a style that resembles the one used in the popular Heim &
Kratzer textbook.

I first define a do-nothing macro so that the global value for
~formatsep~ can be overridden by the ~hk~ style, and then I define the ~hk~
itself as a set of key-value specifications:

#+begin_src latex
\newcommand{\typenothing}[1]{#1}

\ttypestyle{
  formatleft=\textit,
  formatsep=\textbf,
  hk/.style={
    formatsep=\typenothing,
    sep={,},
    leftdel=$\langle$,
    rightdel=$\rangle$
  }
}
#+end_src

[[./figures/typetypes-5.png]]

I don't know when one would ever need to do this, but you can nest
~\ttype~ macros inside of other ~\ttype~ macros if you need different
styles...

#+begin_src latex
A \ttype* {s} {\ttype[hk] {e} {t}} {t}
#+end_src

[[./figures/typetypes-6.png]]
